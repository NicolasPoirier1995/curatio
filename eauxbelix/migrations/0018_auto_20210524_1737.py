# Generated by Django 3.1.3 on 2021-05-24 17:37

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('eauxbelix', '0017_auto_20210412_1613'),
    ]

    operations = [
        migrations.CreateModel(
            name='CondensateData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dt', models.FloatField(blank=True, null=True)),
                ('cond', models.IntegerField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('p', models.IntegerField(blank=True, null=True)),
                ('m', models.IntegerField(blank=True, null=True)),
                ('cl', models.IntegerField(blank=True, null=True)),
                ('fe', models.FloatField(blank=True, null=True)),
                ('cu', models.FloatField(blank=True, null=True)),
                ('temp', models.IntegerField(blank=True, null=True)),
                ('counter', models.FloatField(blank=True, null=True)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CondensateMinMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_min', models.FloatField()),
                ('dt_max', models.FloatField()),
                ('cond_min', models.IntegerField()),
                ('cond_max', models.IntegerField()),
                ('ph_min', models.FloatField()),
                ('ph_max', models.FloatField()),
                ('p_min', models.IntegerField()),
                ('p_max', models.IntegerField()),
                ('m_min', models.IntegerField()),
                ('m_max', models.IntegerField()),
                ('cl_min', models.IntegerField()),
                ('cl_max', models.IntegerField()),
                ('fe_min', models.FloatField()),
                ('fe_max', models.FloatField()),
                ('cu_min', models.FloatField()),
                ('cu_max', models.FloatField()),
                ('temp_min', models.IntegerField()),
                ('temp_max', models.IntegerField()),
                ('counter_min', models.FloatField()),
                ('counter_max', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='DealkalizerData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('p_1', models.IntegerField(blank=True, null=True)),
                ('p_2', models.IntegerField(blank=True, null=True)),
                ('m_1', models.IntegerField(blank=True, null=True)),
                ('m_2', models.IntegerField(blank=True, null=True)),
                ('cl', models.IntegerField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DealkalizerMinMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p_1_min', models.IntegerField()),
                ('p_1_max', models.IntegerField()),
                ('p_2_min', models.IntegerField()),
                ('p_2_max', models.IntegerField()),
                ('m_1_min', models.IntegerField()),
                ('m_1_max', models.IntegerField()),
                ('m_2_min', models.IntegerField()),
                ('m_2_max', models.IntegerField()),
                ('cl_min', models.IntegerField()),
                ('cl_max', models.IntegerField()),
                ('ph_min', models.FloatField()),
                ('ph_max', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='DegasserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dt', models.FloatField(blank=True, null=True)),
                ('cond', models.IntegerField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('p', models.IntegerField(blank=True, null=True)),
                ('m', models.IntegerField(blank=True, null=True)),
                ('cl', models.IntegerField(blank=True, null=True)),
                ('fe', models.FloatField(blank=True, null=True)),
                ('cu', models.FloatField(blank=True, null=True)),
                ('temp', models.IntegerField(blank=True, null=True)),
                ('inh', models.IntegerField(blank=True, null=True)),
                ('counter', models.FloatField(blank=True, null=True)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DegasserMinMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_min', models.FloatField()),
                ('dt_max', models.FloatField()),
                ('cond_min', models.IntegerField()),
                ('cond_max', models.IntegerField()),
                ('ph_min', models.FloatField()),
                ('ph_max', models.FloatField()),
                ('p_min', models.IntegerField()),
                ('p_max', models.IntegerField()),
                ('m_min', models.IntegerField()),
                ('m_max', models.IntegerField()),
                ('cl_min', models.IntegerField()),
                ('cl_max', models.IntegerField()),
                ('fe_min', models.FloatField()),
                ('fe_max', models.FloatField()),
                ('cu_min', models.FloatField()),
                ('cu_max', models.FloatField()),
                ('temp_min', models.IntegerField()),
                ('temp_max', models.IntegerField()),
                ('inh_min', models.IntegerField()),
                ('inh_max', models.IntegerField()),
                ('counter_min', models.FloatField()),
                ('counter_max', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='MixData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dt', models.FloatField(blank=True, null=True)),
                ('cond', models.IntegerField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('p', models.IntegerField(blank=True, null=True)),
                ('m', models.IntegerField(blank=True, null=True)),
                ('cl', models.IntegerField(blank=True, null=True)),
                ('fe', models.FloatField(blank=True, null=True)),
                ('cu', models.FloatField(blank=True, null=True)),
                ('temp', models.IntegerField(blank=True, null=True)),
                ('inh', models.IntegerField(blank=True, null=True)),
                ('counter', models.FloatField(blank=True, null=True)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MixMinMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_min', models.FloatField()),
                ('dt_max', models.FloatField()),
                ('cond_min', models.IntegerField()),
                ('cond_max', models.IntegerField()),
                ('ph_min', models.FloatField()),
                ('ph_max', models.FloatField()),
                ('p_min', models.IntegerField()),
                ('p_max', models.IntegerField()),
                ('m_min', models.IntegerField()),
                ('m_max', models.IntegerField()),
                ('cl_min', models.IntegerField()),
                ('cl_max', models.IntegerField()),
                ('fe_min', models.FloatField()),
                ('fe_max', models.FloatField()),
                ('cu_min', models.FloatField()),
                ('cu_max', models.FloatField()),
                ('temp_min', models.IntegerField()),
                ('temp_max', models.IntegerField()),
                ('inh_min', models.IntegerField()),
                ('inh_max', models.IntegerField()),
                ('counter_min', models.FloatField()),
                ('counter_max', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ReverseOsmosisData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('cl2', models.FloatField(blank=True, null=True)),
                ('permeat', models.FloatField(blank=True, null=True)),
                ('reject', models.FloatField(blank=True, null=True)),
                ('recirc', models.FloatField(blank=True, null=True)),
                ('temp', models.FloatField(blank=True, null=True)),
                ('p_in', models.FloatField(blank=True, null=True)),
                ('p_out', models.FloatField(blank=True, null=True)),
                ('delta_p', models.FloatField(blank=True, null=True)),
                ('m', models.FloatField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReverseOsmosisMinMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cl2_min', models.FloatField()),
                ('cl2_max', models.FloatField()),
                ('permeat_min', models.FloatField()),
                ('permeat_max', models.FloatField()),
                ('reject_min', models.FloatField()),
                ('reject_max', models.FloatField()),
                ('recirc_min', models.FloatField()),
                ('recirc_max', models.FloatField()),
                ('temp_min', models.FloatField()),
                ('temp_max', models.FloatField()),
                ('p_in_min', models.FloatField()),
                ('p_in_max', models.FloatField()),
                ('p_out_min', models.FloatField()),
                ('p_out_max', models.FloatField()),
                ('delta_p_min', models.FloatField()),
                ('delta_p_max', models.FloatField()),
                ('m_min_max', models.FloatField()),
                ('m_max', models.FloatField()),
                ('ph_min', models.FloatField()),
                ('ph_max', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='SoftenerData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dt_1', models.FloatField(blank=True, null=True)),
                ('dt_2', models.FloatField(blank=True, null=True)),
                ('dt_3', models.FloatField(blank=True, null=True)),
                ('cond_1', models.FloatField(blank=True, null=True)),
                ('cond_2', models.FloatField(blank=True, null=True)),
                ('cond_3', models.FloatField(blank=True, null=True)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SoftenerMinMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_1_min', models.FloatField()),
                ('dt_1_max', models.FloatField()),
                ('dt_2_min', models.FloatField()),
                ('dt_2_max', models.FloatField()),
                ('dt_3_min', models.FloatField()),
                ('dt_3_max', models.FloatField()),
                ('cond_1_min', models.FloatField()),
                ('cond_1_max', models.FloatField()),
                ('cond_2_min', models.FloatField()),
                ('cond_2_max', models.FloatField()),
                ('cond_3_min', models.FloatField()),
                ('cond_3_max', models.FloatField()),
            ],
        ),
        migrations.DeleteModel(
            name='PretreatmentData',
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='condensate_data_shown',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('dt', 'D.T.'), ('cond', 'Cond'), ('ph', 'pH'), ('p', 'P'), ('m', 'M'), ('cl', 'Cl-'), ('fe', 'Fe'), ('cu', 'Cu'), ('temp', 'Temp'), ('counter', 'Compteur')], default=None, max_length=255, null=True, verbose_name='Condensate Data Shown'), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='dealkalizer_data_shown',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('p_1', 'P #1'), ('p_2', 'P #2'), ('m_1', 'M #1'), ('m_2', 'M #2'), ('cl', 'Cl-'), ('ph', 'pH')], default=None, max_length=255, null=True, verbose_name='Dealkalizer Data Shown'), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='degasser_data_shown',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('dt', 'D.T.'), ('cond', 'Cond'), ('ph', 'pH'), ('p', 'P'), ('m', 'M'), ('cl', 'Cl-'), ('fe', 'Fe'), ('cu', 'Cu'), ('temp', 'Temp'), ('inh', 'Inh.'), ('counter', 'Compteur')], default=None, max_length=255, null=True, verbose_name='Degasser Data Shown'), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='mix_data_shown',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('dt', 'D.T.'), ('cond', 'Cond'), ('ph', 'pH'), ('p', 'P'), ('m', 'M'), ('cl', 'Cl-'), ('fe', 'Fe'), ('cu', 'Cu'), ('temp', 'Temp'), ('inh', 'Inh.'), ('counter', 'Compteur')], default=None, max_length=255, null=True, verbose_name='Mix Data Shown'), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='reverse_osmosis_data_shown',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('cl2', 'Cl2'), ('permeat', 'Permeat'), ('reject', 'Rejet'), ('recirc', 'Recirc'), ('temp', 'Temp.'), ('p_in', 'P in'), ('p_out', 'P out'), ('delta_p', 'Delta P'), ('m', 'M'), ('ph', 'pH')], default=None, max_length=255, null=True, verbose_name='Reverse Osmosis Data Shown'), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='softener_data_shown',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('dt_1', 'D.T. #1'), ('dt_2', 'D.T. #2'), ('dt_3', 'D.T. #3'), ('cond_1', 'Cond #1'), ('cond_2', 'Cond #2'), ('cond_3', 'Cond #3')], default=None, max_length=255, null=True, verbose_name='Softener Data Shown'), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='softenerdata',
            name='pretreatment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='softener_data', to='eauxbelix.pretreatment'),
        ),
        migrations.AddField(
            model_name='reverseosmosisdata',
            name='pretreatment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reverse_osmosis_data', to='eauxbelix.pretreatment'),
        ),
        migrations.AddField(
            model_name='mixdata',
            name='pretreatment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mix_data', to='eauxbelix.pretreatment'),
        ),
        migrations.AddField(
            model_name='degasserdata',
            name='pretreatment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='degasser_data', to='eauxbelix.pretreatment'),
        ),
        migrations.AddField(
            model_name='dealkalizerdata',
            name='pretreatment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dealkalizer_data', to='eauxbelix.pretreatment'),
        ),
        migrations.AddField(
            model_name='condensatedata',
            name='pretreatment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='condensate_data', to='eauxbelix.pretreatment'),
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='condensate_minmax',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eauxbelix.condensateminmax'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='dealkalizer_minmax',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eauxbelix.dealkalizerminmax'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='degasser_minmax',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eauxbelix.degasserminmax'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='mix_minmax',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eauxbelix.mixminmax'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='reverse_osmosis_minmax',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eauxbelix.reverseosmosisminmax'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pretreatment',
            name='softener_minmax',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eauxbelix.softenerminmax'),
            preserve_default=False,
        ),
    ]
